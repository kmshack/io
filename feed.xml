<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android UI OpenSource</title>
    <description>Collection of OpenSource for Android UI.</description>
    <link>http://android.kmshack.kr/</link>
    <atom:link href="http://android.kmshack.kr/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 23 Dec 2016 01:16:08 +0900</pubDate>
    <lastBuildDate>Fri, 23 Dec 2016 01:16:08 +0900</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>stencil</title>
        <description>&lt;h2 id=&quot;stencil&quot;&gt;stencil&lt;/h2&gt;
&lt;p&gt;Android library, written exclusively in &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt;, for animating the path created from text&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”https://images.thoughtbot.com/blog-vellum-image-uploads/jZpvwqUR8muyhDIT5SSu_stencil.gif” width=300/&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1. Add the JitPack repository to your root &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy
allprojects {
  repositories {
    ...
    maven { url &#39;https://jitpack.io&#39; }
  }
}
&lt;/code&gt;
&lt;strong&gt;Step 2. Add the dependency to your app’s &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file&lt;/strong&gt;
```groovy&lt;/p&gt;

&lt;p&gt;dependencies {
  compile ‘com.github.thoughtbot:stencil:1.0’
}
```&lt;/p&gt;

&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&quot;CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; document. Thank you, &lt;a href=&quot;https://github.com/thoughtbot/stencil/graphs/contributors&quot;&gt;contributors&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;p&gt;stencil is Copyright (c) 2016 thoughtbot, inc. It is free software, and may be redistributed under the terms specified in the &lt;a href=&quot;/LICENSE&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;about&quot;&gt;About&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://thoughtbot.com/logo.png&quot;&gt;thoughtbot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;stencil is maintained and funded by thoughtbot, inc. The names and logos for thoughtbot are trademarks of thoughtbot, inc.&lt;/p&gt;

&lt;p&gt;We love open source software See &lt;a href=&quot;https://thoughtbot.com/tools?utm_source=github&quot;&gt;our other projects&lt;/a&gt; or &lt;a href=&quot;https://thoughtbot.com/hire-us?utm_source=github&quot;&gt;hire us&lt;/a&gt; to help build your product.&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/12/22/stencil/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/12/22/stencil/</guid>
        
        <category>stencil</category>
        
        
      </item>
    
      <item>
        <title>FolioReader</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/FolioReader/FolioReaderKit/assets/folioreader.png&quot;&gt;FolioReader logo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/FolioReader/FolioReader-Android&quot;&gt;[Build Status](https://api.travis-ci.org/FolioReader/FolioReader-Android.svg?branch=master)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FolioReader-Android is an ePub reader and parser framework written in Java.&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;[x] Custom Fonts&lt;/li&gt;
  &lt;li&gt;[x] Custom Text Size&lt;/li&gt;
  &lt;li&gt;[x] Themes / Day mode / Night mode&lt;/li&gt;
  &lt;li&gt;[x] Text Highlighting&lt;/li&gt;
  &lt;li&gt;[x] List / Edit / Delete Highlights&lt;/li&gt;
  &lt;li&gt;[x] Handle Internal and External Links&lt;/li&gt;
  &lt;li&gt;[x] Portrait / Landscape&lt;/li&gt;
  &lt;li&gt;[x] Reading Time Left / Pages left&lt;/li&gt;
  &lt;li&gt;[ ] In-App Dictionary&lt;/li&gt;
  &lt;li&gt;[x] Media Overlays (Sync text rendering with audio playback)&lt;/li&gt;
  &lt;li&gt;[x] TTS - Text to Speech Support&lt;/li&gt;
  &lt;li&gt;[ ] Parse epub cover image&lt;/li&gt;
  &lt;li&gt;[ ] PDF support&lt;/li&gt;
  &lt;li&gt;[ ] Book Search&lt;/li&gt;
  &lt;li&gt;[x] Add Notes to a Highlight&lt;/li&gt;
  &lt;li&gt;[ ] Better Documentation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;##### Custom Fonts
&lt;a href=&quot;https://cloud.githubusercontent.com/assets/1277242/19012915/0661c7b2-87e0-11e6-81d6-8c71051e1074.gif&quot;&gt;Custom fonts&lt;/a&gt;
##### Day and Night Mode
&lt;a href=&quot;https://cloud.githubusercontent.com/assets/1277242/19012914/f42059c4-87df-11e6-97f8-29e61a79e8aa.gif&quot;&gt;Day night mode&lt;/a&gt;
##### Text Highlighting 
&lt;a href=&quot;https://cloud.githubusercontent.com/assets/1277242/19012904/c2700c3a-87df-11e6-97ed-507765b3ddf0.gif&quot;&gt;Highlight&lt;/a&gt;
##### Media Overlays 
&lt;a href=&quot;https://cloud.githubusercontent.com/assets/1277242/19012908/d61f3ce2-87df-11e6-8652-d72b6a1ad9a3.gif&quot;&gt;Media Overlay&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;gradle&quot;&gt;Gradle&lt;/h3&gt;
&lt;p&gt;Add following dependency to your app build.gradle
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
compile &#39;com.folioreader:folioreader:0.2.3&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;To use FolioReader, you need to call FolioReaderActivity with following parameters:
1. INTENT_EPUB_SOURCE_TYPE - your epub can come from raw or assets folder or from SD card. Use enum FolioActivity.EpubSourceType.
2. INTENT_EPUB_SOURCE_PATH - assets/SD card path of the epub file or raw ID of epub file if epub file is in raw folder&lt;/p&gt;

&lt;p&gt;Reading from assets folder
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
Intent intent = new Intent(HomeActivity.this, FolioActivity.class);
intent.putExtra(FolioActivity.INTENT_EPUB_SOURCE_TYPE, FolioActivity.EpubSourceType.ASSESTS);
intent.putExtra(FolioActivity.INTENT_EPUB_SOURCE_PATH, &quot;epub/The Silver Chair.epub&quot;);
startActivity(intent);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Reading from raw folder of resources
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
Intent intent = new Intent(HomeActivity.this, FolioActivity.class);
intent.putExtra(FolioActivity.INTENT_EPUB_SOURCE_TYPE, FolioActivity.EpubSourceType.RAW);
intent.putExtra(FolioActivity.INTENT_EPUB_SOURCE_PATH, R.raw.adventures);
startActivity(intent);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For reading from SD card, just retrieve absolute path of epub file and pass that in INTENT_EPUB_SOURCE_PATH.&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/daimajia/AndroidSwipeLayout&quot;&gt;SwipeLayout&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ormlite.com/&quot;&gt;ORMLite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/julianharty/new-android-daisy-reader&quot;&gt;SMIL parsing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;author&quot;&gt;Author&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hebertialmeida&quot;&gt;&lt;strong&gt;Heberti Almeida&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow me on &lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href=&quot;https://twitter.com/hebertialmeida&quot;&gt;&lt;strong&gt;@hebertialmeida&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Contact me on &lt;strong&gt;LinkedIn&lt;/strong&gt;: &lt;a href=&quot;http://linkedin.com/in/hebertialmeida&quot;&gt;&lt;strong&gt;hebertialmeida&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mahavir155&quot;&gt;&lt;strong&gt;Mahavir Jain&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow me on &lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href=&quot;https://twitter.com/mahavir155&quot;&gt;&lt;strong&gt;@mahavir155&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Contact me on &lt;strong&gt;LinkedIn&lt;/strong&gt;: &lt;a href=&quot;http://linkedin.com/in/mahavir155&quot;&gt;&lt;strong&gt;mahavir155&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;donations&quot;&gt;Donations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This project needs you&lt;/strong&gt; If you would like to support this project’s further development, the creator of this project or the continuous maintenance of this project, &lt;strong&gt;feel free to donate&lt;/strong&gt;. Your donation is highly appreciated. Thank you&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PayPal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[&lt;strong&gt;Donate 5 $&lt;/strong&gt;] (https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;amount=5%2e00&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted): Thank’s for creating this project, here’s a tea (or some juice) for you&lt;/li&gt;
  &lt;li&gt;[&lt;strong&gt;Donate 10 $&lt;/strong&gt;] (https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;amount=10%2e00&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted): Wow, I am stunned. Let me take you to the movies&lt;/li&gt;
  &lt;li&gt;[&lt;strong&gt;Donate 15 $&lt;/strong&gt;] (https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;amount=15%2e00&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted): I really appreciate your work, let’s grab some lunch&lt;/li&gt;
  &lt;li&gt;[&lt;strong&gt;Donate 25 $&lt;/strong&gt;] (https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;amount=25%2e00&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted): That’s some awesome stuff you did right there, dinner is on me&lt;/li&gt;
  &lt;li&gt;[&lt;strong&gt;Donate 50 $&lt;/strong&gt;] (https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;amount=50%2e00&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted): I really really want to support this project, great job&lt;/li&gt;
  &lt;li&gt;[&lt;strong&gt;Donate 100 $&lt;/strong&gt;] (https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;amount=100%2e00&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted): You are the man This project saved me hours (if not days) of struggle and hard work, simply awesome&lt;/li&gt;
  &lt;li&gt;Of course, you can also &lt;a href=&quot;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=hebertialmeida%40gmail%2ecom&amp;amp;lc=US&amp;amp;item_name=FolioReader%20Libraries&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted&quot;&gt;&lt;strong&gt;choose what you want to donate&lt;/strong&gt;&lt;/a&gt;, all donations are awesome&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;
&lt;p&gt;FolioReaderKit is available under the BSD license. See the &lt;a href=&quot;https://github.com/FolioReader/FolioReader-Android/blob/master/License.md&quot;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Dec 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/12/22/FolioReader/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/12/22/FolioReader/</guid>
        
        <category>reader</category>
        
        <category>view</category>
        
        
      </item>
    
      <item>
        <title>LongPressPopup</title>
        <description>&lt;h1 id=&quot;longpresspopup&quot;&gt;LongPressPopup&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;sample.gif&quot; title=&quot;sample&quot; /&gt;
&lt;br /&gt;
You can try the demo app on google play store. &lt;br /&gt;
https://play.google.com/store/apps/details?id=rm.com.longpresspopupsample &lt;br /&gt; &lt;br /&gt;
Or see the full video demo on YouTube. &lt;br /&gt;
https://youtu.be/oSETieldmyw &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A library that let you implement a behaviour similar to the Instagram’s &lt;br /&gt;
long press to show detail one, with the option to put every kind of views inside it, &lt;br /&gt;
(even web views, lists, pagers and so on) show tooltips on drag over &lt;br /&gt;
and handle the release of the finger over Views &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;[Changelog] (CHANGELOG.md)&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;####Gradle:
&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy
compile &#39;com.rm:longpresspopup:1.0.0&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;b&gt;Min SDK version: 10 (Android 2.3.3) &lt;/b&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;##Usage&lt;/p&gt;

&lt;p&gt;####Basic
Here’s a basic example &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ActivityMain&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppCompatActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;btn_popup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;c1&quot;&gt;// Create a foo TextView&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, Foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;LongPressPopup&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;popup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LongPressPopupBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// A Context object for the builder constructor&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The View which will open the popup if long pressed&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPopupView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The View to show when long pressed &lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This will give you a LongPressPopup object&lt;/span&gt;
                    
            &lt;span class=&quot;c1&quot;&gt;// You can also chain it to the .build() mehod call above without declaring the &quot;popup&quot; variable before &lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;popup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// From this moment, the touch events are registered and, if long pressed, will show the given view inside the popup, call unregister() to stop&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;sample_short.gif&quot; title=&quot;sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;####Advanced
Here’s a complete example with all the options &lt;br /&gt;
```java
public class ActivityMain extends AppCompatActivity implements PopupInflaterListener,
            PopupStateListener, PopupOnHoverListener, View.OnClickListener {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private static final String TAG = ActivityMain.class.getSimpleName();
 
private TextView mTxtPopup;   
    
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    
    Button btn = (Button) findViewById(R.id.btn_popup);
    
    LongPressPopup popup = new LongPressPopupBuilder(this)
                    .setTarget(btn)
                    //.setPopupView(textView)// Not using this time
                    .setPopupView(R.layout.popup_layout, this)
                    .setLongPressDuration(750)
                    .setDismissOnLongPressStop(false)
                    .setDismissOnTouchOutside(false)
                    .setDismissOnBackPressed(false)
                    .setCancelTouchOnDragOutsideView(true)
                    .setLongPressReleaseListener(this)
                    .setOnHoverListener(this)
                    .setPopupListener(this)
                    .setTag(&quot;PopupFoo&quot;)
                    .setAnimationType(LongPressPopup.ANIMATION_TYPE_FROM_CENTER)
                    .build();
            
    // You can also chain it to the .build() mehod call above without declaring the &quot;popup&quot; variable before 
    popup.register();
}


// Popup inflater listener
@Override
public void onViewInflated(@Nullable String popupTag, View root) {
    mTxtPopup = (TextView) root.findViewById(R.id.txt_popup);
}


// Touch released on a View listener
@Override
public void onClick(View view) {
    if (mTxtPopup = null &amp;amp;&amp;amp; view.getId() == mTxtPopup.getId()) {
        Toast.makeText(ActivityMain.this, &quot;TextView Clicked&quot;, Toast.LENGTH_SHORT).show();
    }
}


// PopupStateListener
@Override
public void onPopupShow(@Nullable String popupTag) {
    if(mTxtPopup = null) {
        mTxtPopup.setText(&quot;FooBar&quot;);
    }
}

@Override
public void onPopupDismiss(@Nullable String popupTag) {
    Toast.makeText(this, &quot;Popup dismissed&quot;, Toast.LENGTH_SHORT).show();
}


// Hover state listener
@Override
public void onHoverChanged(View view, boolean isHovered) {
    Log.e(TAG, &quot;Hover change: &quot; + isHovered + &quot; on View &quot; + view.getClass().getSimpleName());
} } ``` &amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt; And here are the functions you can use to customize the Popup and it&#39;s behaviour from the LongPressPopupBuilder class: &amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setTarget(View target)&lt;/code&gt; &lt;b&gt;(null by default) &lt;/b&gt; &lt;br /&gt;
  Select which view will show the popup view if long pressed &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setPopupView(View popupView)&lt;/code&gt; &lt;b&gt;(null by default)&lt;/b&gt; &lt;br /&gt;
  Select the view that will be shown inside the popup &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setPopupView(@LayoutRes int popupViewRes, PopupInflaterListener inflaterListener)&lt;/code&gt; &lt;b&gt;(0, null by default)&lt;/b&gt; &lt;br /&gt;
  Select the view that will be shown inside the popup, and give the popup that will be &lt;br /&gt;
  called when the view is inflated (not necessarily when shown, so not load images and so on in this callback, &lt;br /&gt;
  just take the views like in the OnCreate method of an Activity) &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setLongPressDuration(@IntRange(from = 1) int duration)&lt;/code&gt; &lt;b&gt;(500 by default)&lt;/b&gt; &lt;br /&gt;
  Pretty self explanatory right? **Captain here, the long press time needed to show the popup &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setDismissOnLongPressStop(boolean dismissOnPressStop)&lt;/code&gt; &lt;b&gt;(true by default)&lt;/b&gt; &lt;br /&gt;
  Set if the popup will be dismissed when the user releases the finger (if released on a View inside &lt;br /&gt;
  the popup, the View’s or the given OnClickListener will be called) &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setDismissOnTouchOutside(boolean dismissOnTouchOutside)&lt;/code&gt; &lt;b&gt;(true by default)&lt;/b&gt; &lt;br /&gt;
  If &lt;code class=&quot;highlighter-rouge&quot;&gt;setDismissOnLongPressStop(boolean dismissOnPressStop)&lt;/code&gt; is set to false, you can choose to make &lt;br /&gt;
  the popup dismiss or not if the user touch outside it with this boolean &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setDismissOnBackPressed(boolean dismissOnBackPressed)&lt;/code&gt;  &lt;b&gt;(true by default)&lt;/b&gt; &lt;br /&gt;
  If &lt;code class=&quot;highlighter-rouge&quot;&gt;setDismissOnLongPressStop(boolean dismissOnPressStop)&lt;/code&gt; is set to false, you can choose to make &lt;br /&gt;
  the popup dismiss or not if the user press the back button &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setCancelTouchOnDragOutsideView(boolean cancelOnDragOutside)&lt;/code&gt; &lt;b&gt;(true by default)&lt;/b&gt; &lt;br /&gt;
  Set if the long press timer will stop or not if the user drag the finger outside the target View &lt;br /&gt;
  (If the target View is inside a scrolling parent, when scrolling vertically the long press timer &lt;br /&gt;
  will be automatically stopped &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setLongPressReleaseListener(View.OnClickListener listener)&lt;/code&gt; &lt;b&gt;(null by default)&lt;/b&gt; &lt;br /&gt;
  This is a standard OnClickListener, which will be called if the user release the finger on a view inside &lt;br /&gt;
  the popup, you can use this method or set a standard OnClickListener on the View you want, it will be called &lt;br /&gt;
  automatically for you &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setOnHoverListener(PopupOnHoverListener listener)&lt;/code&gt; &lt;b&gt;(null by default)&lt;/b&gt; &lt;br /&gt;
  This listener will be called every time the user keeps dragging it’s finger inside or outside the popup &lt;br /&gt;
  views, with a View reference and a boolean with the hover state &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setPopupListener(PopupStateListener popupListener)&lt;/code&gt; &lt;b&gt;(null by default)&lt;/b&gt; &lt;br /&gt;
  This listener will be called when the popup is shown or dismissed, use this listener to load images or compile text views and so on &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setTag(String tag)&lt;/code&gt; &lt;b&gt;(null by default)&lt;/b&gt; &lt;br /&gt;
  This method sets a tag on the LongPressPopup, the given tag will be returned in all the listeners. You can also set it in the build(String tag) &lt;br /&gt; 
  method &lt;br /&gt; &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public LongPressPopupBuilder setAnimationType(@LongPressPopup.AnimationType int animationType)&lt;/code&gt; &lt;b&gt;(none by default)&lt;/b&gt; &lt;br /&gt;
  This method set the opening and closing animation for the popup, can be none or from-to Bottom, Top, Right, Left, Center&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Also, the LongPressPopup class gives some utility methods, like &lt;br /&gt; 
* &lt;code class=&quot;highlighter-rouge&quot;&gt;public void register()&lt;/code&gt; &lt;br /&gt;
    Which means that the popup is listening for touch events on the given view to show itself &lt;br /&gt; &lt;br /&gt;
* &lt;code class=&quot;highlighter-rouge&quot;&gt;public void unregister()&lt;/code&gt; &lt;br /&gt;
    Which makes to popup stop listening for touch events and dismiss itself if open  &lt;br /&gt; &lt;br /&gt;
* &lt;code class=&quot;highlighter-rouge&quot;&gt;public void showNow()&lt;/code&gt; &lt;br /&gt;
    Which shows immediately the popup
* &lt;code class=&quot;highlighter-rouge&quot;&gt;public void dismissNow()&lt;/code&gt; &lt;br /&gt;
    Which dismiss immediately the popup if open&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright 2016 Riccardo Moro.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and 
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/21/LongPressPopup/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/21/LongPressPopup/</guid>
        
        <category>popup</category>
        
        <category>3dtouch</category>
        
        
      </item>
    
      <item>
        <title>Crescento</title>
        <description>&lt;h1 id=&quot;crescento&quot;&gt;Crescento&lt;/h1&gt;

&lt;p&gt;Android library that adds a curve at the below of image views and relative layouts. &lt;strong&gt;CrescentoImageView&lt;/strong&gt; and &lt;strong&gt;CrescentoContainer&lt;/strong&gt; are the image view and relative layout respectively. You can change the radius of curve with &lt;strong&gt;attribute:curvature&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://android-arsenal.com/api?level=11&quot;&gt;[API](https://img.shields.io/badge/API-9%2B-orange.svg?style=flat)&lt;/a&gt;
&lt;a href=&quot;https://android-arsenal.com/details/1/4684&quot;&gt;[Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Crescento-green.svg?style=true)&lt;/a&gt;
&lt;a href=&quot;http://androidweekly.net/issues/issue-232&quot;&gt;[Android Weekly](https://img.shields.io/badge/Android%20Weekly-%23232-blue.svg)&lt;/a&gt;
&lt;a href=&quot;https://www.androiddevdigest.com/digest-119/&quot;&gt;[AndroidDev Digest](https://img.shields.io/badge/AndroidDev%20Digest-%23119-blue.svg)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/art/sample_image.jpg&quot;&gt;Sample Image 2&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Crescento&lt;/strong&gt; provides following advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Curve Bottom&lt;/strong&gt;: It adds a curve bottom as stated above.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tint&lt;/strong&gt;: It add tint on &lt;strong&gt;CrescentoImageView&lt;/strong&gt; by using &lt;strong&gt;attribute:tintColor&lt;/strong&gt;. It pick color automatically from the image if &lt;strong&gt;tintMode&lt;/strong&gt; is set to &lt;strong&gt;automatic&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Alpha&lt;/strong&gt;: Add transparency in tint by using &lt;strong&gt;attribute:tintAlpha&lt;/strong&gt;. Varies from 0 to 255.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gradient&lt;/strong&gt; : Add gradient on the imageview.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/developer-shivam/crescento/blob/master/demo.apk&quot;&gt;Sample Apk&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;use-with-kenburnsview&quot;&gt;Use with &lt;strong&gt;&lt;a href=&quot;https://github.com/flavioarfaria/KenBurnsView&quot;&gt;KenBurnsView&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/art/sample2.gif&quot;&gt;Sample Image 1&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shivam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CrescentoContainer&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/crescentoContainer&quot;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300dp&quot;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elevation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20dp&quot;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;centerCrop&quot;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;attribute:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curvature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50dp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flaviofaria&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;kenburnsview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KenBurnsView&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
            &lt;span class=&quot;nl&quot;&gt;android:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/wallpaper2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;shivam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CrescentoContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;donations&quot;&gt;Donations&lt;/h2&gt;

&lt;p&gt;This project needs you If you would like to support this project’s further development, the creator of this project or the continuous maintenance of this project, feel free to donate. Your donation is highly appreciated (and I love food, coffee and beer). Thank you&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PayPal&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/5&quot;&gt;Donate $5&lt;/a&gt;&lt;/strong&gt;: Thank’s for creating this project, here’s a coffee (or some beer) for you&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/10&quot;&gt;Donate $10&lt;/a&gt;&lt;/strong&gt;: Wow, I am stunned. Let me take you to the movies&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/15&quot;&gt;Donate $15&lt;/a&gt;&lt;/strong&gt;: I really appreciate your work, let’s grab some lunch&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/25&quot;&gt;Donate $25&lt;/a&gt;&lt;/strong&gt;: That’s some awesome stuff you did right there, dinner is on me&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/50&quot;&gt;Donate $50&lt;/a&gt;&lt;/strong&gt;: I really really want to support this project, great job&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/100&quot;&gt;Donate $100&lt;/a&gt;&lt;/strong&gt;: You are the man This project saved me hours (if not days) of struggle and hard work, simply awesome&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.paypal.me/developerShivam/2799&quot;&gt;Donate $2799&lt;/a&gt;&lt;/strong&gt;: Go buddy, buy Macbook Pro for yourself
Of course, you can also choose what you want to donate, all donations are awesome&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Here is a very good example of how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;Crescento&lt;/code&gt;. &lt;strong&gt;Zsolt Szilvai&lt;/strong&gt; has made a very good design and I’ve illustrated using crescento.&lt;/p&gt;

&lt;p&gt;https://material.uplabs.com/posts/cinema-application-interface&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/art/sample2.png&quot;&gt;Sample of Zsolt Szilvai’s design&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;gradle-integration&quot;&gt;Gradle Integration&lt;/h2&gt;

&lt;p&gt;If you are using gradle then add these lines in build.gradle file at project level.
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
	allprojects {
        repositories {
            ...
            maven { url &quot;https://jitpack.io&quot; }
        }
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add below lines in build.gradle at app level.
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
	compile &#39;com.github.developer-shivam:crescento:1.0.1&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For a working implementation, see &lt;code class=&quot;highlighter-rouge&quot;&gt;/app&lt;/code&gt; folder&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CrescentoImageView&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;developer.shivam.library.CrescentoImageView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/crescentoImageView&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:elevation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:scaleType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;centerCrop&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attribute:curvature=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attribute:tintMode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manual&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attribute:tintColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#FFFFFF&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attribute:tintAlpha=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;CrescentoContainer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;developer.shivam.library.CrescentoContainer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/crescentoContainer&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:elevation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;20dp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;attribute:curvature=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50dp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/developer.shivam.library.CrescentoContainer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;attributes&quot;&gt;Attributes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;curvature&lt;/strong&gt;: To change the size of curve.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;curvatureDirection&lt;/strong&gt; : To change the direction of curvature. Whether &lt;strong&gt;inward&lt;/strong&gt; or &lt;strong&gt;outward&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tintColor&lt;/strong&gt;: To add tint on image view.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tintMode&lt;/strong&gt;: To add tint &lt;strong&gt;manually&lt;/strong&gt; or &lt;strong&gt;automatically&lt;/strong&gt;. If &lt;strong&gt;automatically&lt;/strong&gt; it will pick color from image you have set.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;tintAlpha&lt;/strong&gt;: To set the amount of tint. 0 for 100% transparent and 255 for opaque.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;gradientDirection&lt;/strong&gt; : To set the direction of gradient. Supported direction are &lt;strong&gt;TOP_TO_BOTTOM&lt;/strong&gt;, &lt;strong&gt;BOTTOM_TO_TOP&lt;/strong&gt;, &lt;strong&gt;LEFT_TO_RIGHT&lt;/strong&gt; and &lt;strong&gt;RIGHT_TO_LEFT&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;gradientStartColor&lt;/strong&gt; : gradient start color.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;gradientEndColor&lt;/strong&gt; : gradient end color.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;question--contact-me--hire-me&quot;&gt;Question / Contact Me / Hire Me&lt;/h2&gt;
&lt;p&gt;Please feel free to ping me at &lt;strong&gt;dr.droid27@gmail.com&lt;/strong&gt;. Expected package would be &lt;strong&gt;12 lpa&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MIT License

Copyright (c) 2016 Shivam Satija

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 21 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/21/Crescento/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/21/Crescento/</guid>
        
        <category>imageview</category>
        
        
      </item>
    
      <item>
        <title>RMSwitch</title>
        <description>&lt;h1 id=&quot;rmswitch&quot;&gt;RMSwitch&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;switch-sample.gif&quot; title=&quot;sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A simple View that works like a switch, but with more customizations. &lt;br /&gt;
With the option to choose between two or three states. (from v1.1.0) &lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;#####** If you’re upgrading from a version &amp;lt; 1.2.0, check the changelog of the 1.2.0 version, there are breaking changes &lt;br /&gt;
[Changelog] (CHANGELOG.md)&lt;/p&gt;

&lt;h5 id=&quot;from-version-120-you-can-choose-between-three-switch-design-br-&quot;&gt;From version 1.2.0 you can choose between three switch design: &lt;br /&gt;&lt;/h5&gt;
&lt;p&gt;-“Slim” &lt;br /&gt;
-“Large” &lt;br /&gt;
-“Android” &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;switch_design_samples.png&quot; title=&quot;design_sample&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;####Gradle:
&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy
compile &#39;com.rm:rmswitch:1.2.2&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;b&gt;Min API level: 16 (Android 4.1) &lt;/b&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use them, just add this to your layout file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Two&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;states&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.rm.rmswitch.RMSwitch&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/your_id&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
                
                &lt;span class=&quot;na&quot;&gt;app:checked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:forceAspectRatio=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchDesign=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchBkgCheckedColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/green&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchBkgNotCheckedColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/red&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleCheckedColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/green&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleCheckedImage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/happy&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleNotCheckedColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/red&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleNotCheckedImage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/sad&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Three&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;states&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;                
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.rm.rmswitch.RMTristateSwitch&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/your_id2&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
                
                &lt;span class=&quot;na&quot;&gt;app:forceAspectRatio=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:state=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:enabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchDesign=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchBkgLeftColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/red&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchBkgMiddleColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/grey&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchBkgRightColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/green&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleLeftColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/red&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleLeftImage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/sad&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleMiddleColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/grey&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleMiddleImage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/neutral&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleRightColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@color/green&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;app:switchToggleRightImage=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/happy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;… if you need to use this View’s custom xml attributes (shown in a table below or in the example above) do not forget to add this to your root layout
&lt;code class=&quot;highlighter-rouge&quot;&gt;
xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To see how it looks in the preview screen of Android Studio, build your project first&lt;/p&gt;

&lt;p&gt;And this in your Activity
```java
public class MainActivity extends AppCompatActivity {
    RMSwitch mSwitch;
    RMTristateSwitch mTristateSwitch;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    
    mSwitch = (RMSwitch) findViewById(R.id.your_id);
    mTristateSwitch = (RMTristateSwitch) findViewById(R.id.your_id2);
    
    
    // Setup the switch
    mSwitch.setChecked(true);
    mSwitch.setEnabled(true);
    mSwitch.setForceAspectRatio(false);
    mSwitch.setSwitchBkgCheckedColor(Color.GREEN);
    mSwitch.setSwitchBkgNotCheckedColor(Color.RED);
    mSwitch.setSwitchToggleCheckedColor(Color.BLACK);
    mSwitch.setSwitchToggleNotCheckedColor(Color.BLACK);
    mSwitch.setSwitchDesign(RMTristateSwitch.DESIGN_ANDROID);
    
    
    // You can choose if use drawable or drawable resource
    //mSwitch.setSwitchToggleCheckedDrawableRes(android.R.drawable.ic_media_next);
    mSwitch.setSwitchToggleCheckedDrawable(ContextCompat.getDrawable(this, android.R.drawable.ic_media_next));
    
    //mSwitch.setSwitchToggleNotCheckedDrawableRes(android.R.drawable.ic_media_previous);
    mSwitch.setSwitchToggleNotCheckedDrawable(ContextCompat.getDrawable(this, android.R.drawable.ic_media_previous));
    
    
    // Setup the tristate switch
    mTristateSwitch.setState(RMTristateSwitch.STATE_LEFT);
    mTristateSwitch.setForceAspectRatio(true);
    mTristateSwitch.setEnabled(true);
    mTristateSwitch.setRightToLeft(false);
    mTristateSwitch.setSwitchDesign(RMTristateSwitch.DESIGN_LARGE);
    mTristateSwitch.setSwitchToggleLeftColor(Color.DKGRAY);
    mTristateSwitch.setSwitchToggleMiddleColor(Color.DKGRAY);
    mTristateSwitch.setSwitchToggleRightColor(Color.DKGRAY);
    mTristateSwitch.setSwitchBkgLeftColor(Color.LTGRAY);
    mTristateSwitch.setSwitchBkgMiddleColor(Color.LTGRAY);
    mTristateSwitch.setSwitchBkgRightColor(Color.LTGRAY);
    
    
    // You can choose if use drawable or drawable resource
    //mTristateSwitch.setSwitchToggleLeftDrawableRes(android.R.drawable.ic_media_previous);
    mTristateSwitch.setSwitchToggleLeftDrawable(ContextCompat.getDrawable(this, android.R.drawable.ic_media_previous));
    
    //mTristateSwitch.setSwitchToggleMiddleDrawableRes(android.R.drawable.ic_media_play);
    mTristateSwitch.setSwitchToggleMiddleDrawable(ContextCompat.getDrawable(this, android.R.drawable.ic_media_play));
    
    //mTristateSwitch.setSwitchToggleRightDrawableRes(android.R.drawable.ic_media_next);
    mTristateSwitch.setSwitchToggleRightDrawable(ContextCompat.getDrawable(this, android.R.drawable.ic_media_next));
    
    
    // Add a Switch state observer
    mSwitch.addSwitchObserver(new RMSwitch.RMSwitchObserver() {
        @Override
        public void onCheckStateChange(RMSwitch switchView, boolean isChecked) {
                            Toast.makeText(MainActivity.this, 
                                    &quot;Switch state: &quot; + 
                                    (isChecked ? &quot;checked&quot; : &quot;not checked&quot;), Toast.LENGTH_LONG)
                                    .show();
        }
    });
    
    mTristateSwitch.addSwitchObserver(new RMTristateSwitch.RMTristateSwitchObserver() {
        @Override
        public void onCheckStateChange(RMTristateSwitch switchView, @RMTristateSwitch.State int state) {
            Toast
                    .makeText(MainActivity.this,
                            state == RMTristateSwitch.STATE_LEFT ?
                                    &quot;Left&quot; :
                                    state == RMTristateSwitch.STATE_MIDDLE ?
                                            &quot;Middle&quot; :
                                            &quot;Right&quot;,
                            Toast.LENGTH_SHORT).show();
        }
    });
} } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;####Supported Attributes
RMSwitch
——
| XML Attribute                 | Java method                                                     	| Description                                                                                                     	| Default value                                      	                                        |
|————————-	    |—————————————————————–	|—————————————————————————————————————–	|———————————————————————————————  |
| checked                  	    | setChecked(boolean checked)                                     	| The initial state of the Switch, if checked or not                                                              	| false                                              	                                        |
| enabled                  	    | setEnabled(boolean enabled)                                     	| If not enabled, the Switch will not be clickable, but it is still possible to change its state programmatically 	| true                                               	                                        |
| forceAspectRatio         	    | setForceAspectRatio(boolean forceAspectRatio)                   	| Force the Switch aspect ratio                                                                                   	| true                                               	                                        |
| switchBkgCheckedColor    	    | setSwitchBkgCheckedColor(@ColorInt int color)                   	| The background color of the Switch if checked                                                                   	| your current theme colorControlHighlight attribute 	                                        |
| switchBkgNotCheckedColor 	    | setSwitchBkgNotCheckedColor(@ColorInt int color)                	| The background color of the Switch if not checked                                                               	| the same as switchBkgCheckedColor                	                                            |
| switchToggleCheckedColor      | setSwitchToggleCheckedColor(@ColorInt int color)                	| The color of the Switch toggle if checked                                                                       	| your current theme colorAccent attribute           	                                        |
| switchToggleNotCheckedColor   | setSwitchToggleNotCheckedColor(@ColorInt int color)             	| The color of the Switch toggle if not checked                                                                   	| white                                              	                                        |
| switchToggleCheckedImage      | setSwitchToggleCheckedDrawableRes(@DrawableRes int drawable)    	| The image to be shown on the toggle if checked                                                                  	| the same as switchToggleNotCheckedImage if set, none otherwise                                |
|                               | setSwitchToggleCheckedDrawable(Drawable drawable)                 |                                                                                                                   |                                                                                               |
| switchToggleNotCheckedImage   | setSwitchToggleNotCheckedDrawableRes(@DrawableRes int drawable) 	| The image to be shown on the toggle if not checked                                                              	| the same as switchToggleCheckedImage if set, none otherwise                                   |
|                               | setSwitchToggleNotCheckedDrawable(Drawable drawable)                 |                                                                                                                   |                                                                                            |
| switchDesign                  | setSwitchDesign(@SwitchDesign int switchDesign)                   | The switch design, one of the RMAbstractSwitch.DESIGN_*** constants, changes the appearance of the switch         | RMAbstractSwitch.DESIGN_LARGE                                                                 |&lt;/p&gt;

&lt;h2 id=&quot;rmtristateswitch&quot;&gt;RMTristateSwitch&lt;/h2&gt;
&lt;p&gt;| XML Attribute                 | Java method                                                     	| Description                                                                                                     	| Default value                                      	                                        |
|————————-	    |—————————————————————–	|—————————————————————————————————————–	|———————————————————————————————  |
| state                  	    | setState(@State int state)                                     	| The initial state of the Switch, if left, middle or right                                                         | left                                              	                                        |
| enabled                  	    | setEnabled(boolean enabled)                                     	| If not enabled, the Switch will not be clickable, but it is still possible to change its state programmatically 	| true                                               	                                        |
| forceAspectRatio         	    | setForceAspectRatio(boolean forceAspectRatio)                   	| Force the Switch aspect ratio                                                                                   	| true                                               	                                        |
| right_to_left                 | setRightToLeft(boolean rightToLeft)                               | The direction of the switch at every tap, if from left to right or right to left                                  | false                                                                                         |
| switchBkgLeftColor    	    | setSwitchBkgLeftColor(@ColorInt int color)                   	    | The background color of the Switch if in the left state                                                           | your current theme colorControlHighlight attribute 	                                        |
| switchBkgMiddleColor    	    | setSwitchBkgMiddleColor(@ColorInt int color)                   	| The background color of the Switch if in the middle state                                                         | the same as switchBkgLeftColor                      	                                        |
| switchBkgRightColor    	    | setSwitchBkgRightColor(@ColorInt int color)                   	| The background color of the Switch if in the right state                                                     	    | the same as switchBkgLeftColor                     	                                        |
| switchToggleLeftColor    	    | setSwitchToggleLeftColor(@ColorInt int color)                   	| The background color of the Switch if in the left state                                                           | white                                              	                                        |
| switchToggleMiddleColor    	| setSwitchToggleMiddleColor(@ColorInt int color)                   | The background color of the Switch if in the middle state                                                         | your current theme primaryColor attribute          	                                        |
| switchToggleRightColor    	| setSwitchToggleRightColor(@ColorInt int color)                   	| The background color of the Switch Toggle if in the right state                                                   | your current theme accentColor attribute          	                                        |
| switchToggleLeftImage    	    | setSwitchToggleLeftDrawableRes(@ColorInt int color)               | The toggle image of the Switch if in the left state                                                               | the same as the one of the other states toggle image if at least one set, none otherwise 	    |
|                               | setSwitchToggleLeftDrawable(Drawable drawable)                    |                                                                                                                   |                                                                                               |
| switchToggleMiddleImage    	| setSwitchToggleMiddleDrawableRes(@ColorInt int color)             | The toggle image of the Switch if in the middle state                                                             | the same as the one of the other states toggle image if at least one set, none otherwise 	    |
|                               | setSwitchToggleMiddleDrawable(Drawable drawable)                  |                                                                                                                   |                                                                                               |
| switchToggleRightImage    	| setSwitchToggleRightDrawableRes(@ColorInt int color)              | The toggle image of the Switch if in the right state                                                              | the same as the one of the other states toggle image if at least one set, none otherwise 	    |
|                               | setSwitchToggleRightDrawable(Drawable drawable)                   |                                                                                                                   |                                                                                               |
| switchDesign                  | setSwitchDesign(@SwitchDesign int switchDesign)                   | The switch design, one of the RMAbstractSwitch.DESIGN_*** constants, changes the appearance of the switch         | RMAbstractSwitch.DESIGN_LARGE                                                                 |&lt;/p&gt;

&lt;p&gt;The changes between the Switch states will be automatically cross-faded, to obtain a smooth experience&lt;/p&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright 2016 Riccardo Moro.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and 
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 20 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/20/RMSwitch/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/20/RMSwitch/</guid>
        
        <category>switch</category>
        
        
      </item>
    
      <item>
        <title>Depth-LIB-Android</title>
        <description>&lt;h1 id=&quot;depth-lib-android&quot;&gt;Depth-LIB-Android&lt;/h1&gt;

&lt;p&gt;This library adds depth/thickness to views.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ih2erag2beM&quot;&gt;&lt;img src=&quot;https://d13yacurqjgara.cloudfront.net/users/655449/screenshots/2179342/menu_dribble.gif&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ih2erag2beM&quot;&gt;See demo on youtube&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;
&lt;p&gt;The demo code contains some examples of Canvas drawing techniques to create particle systems, waves and grain effect. I wasn’t really happy with the default shadows in Android beacuse they start misbehaving when they are rotated so I made my own shadow solution. The project also contains various tweening functions for animations, and uses the Facebook rebound lib for some tweens. Don’t expect too much from this lib, it was written as a quick prototype, so the visuals look good but the code behind it could have been better.&lt;/p&gt;

&lt;h2 id=&quot;contact&quot;&gt;Contact&lt;/h2&gt;

&lt;p&gt;You can reach me on twitter as &lt;a href=&quot;https://twitter.com/zellah&quot;&gt;@zellah&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;whos-behind-this&quot;&gt;Who’s behind this?&lt;/h2&gt;

&lt;p&gt;Developed by &lt;a href=&quot;https://twitter.com/zellah&quot;&gt;@zellah&lt;/a&gt; at &lt;a href=&quot;http://agens.no/&quot;&gt;agens.no&lt;/a&gt;, a company situated in Oslo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://agens.no/&quot;&gt;&lt;img src=&quot;http://static.agens.no/images/agens_logo_w_slogan_avenir_medium.png&quot; width=&quot;340&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/17/Depth/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/17/Depth/</guid>
        
        <category>depth</category>
        
        <category>thickness</category>
        
        
      </item>
    
      <item>
        <title>CircularBarPager</title>
        <description>&lt;h1 id=&quot;circularbarpager-android-arsenalhttpsimgshieldsiobadgeandroid20arsenal-circularbarpager-brightgreensvgstyleflathttpsandroid-arsenalcomdetails11426&quot;&gt;CircularBarPager &lt;a href=&quot;https://android-arsenal.com/details/1/1426&quot;&gt;[Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-CircularBarPager-brightgreen.svg?style=flat)&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;A Lollipop material design styled CircularBarPager library (API 10+).&lt;/p&gt;

&lt;p&gt;To include in your project, add this to your build.gradle file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   //CircularBarPager
   compile &#39;com.github.orangegangsters:library:1.3.4@aar&#39;
   //CirclePageIndicator
   compile &#39;com.viewpagerindicator:library:2.4.1@aar&#39;
   //Animations and progress value easing
   compile &#39;com.nineoldandroids:library:2.4.0&#39;
   compile &#39;com.daimajia.easing:library:1.0.1@aar&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;app/src/main/res/raw/github_gif.gif&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;========
### By
Developers:
        &lt;a href=&quot;https://github.com/olivierg13&quot;&gt;Olivier Goutay&lt;/a&gt; and &lt;a href=&quot;https://github.com/StoyanD&quot;&gt;Stoyan Dimitrov&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Designers:
        &lt;a href=&quot;http://danielwaldron.com/&quot;&gt;Daniel Waldron&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;Look at the example app for a live example on how to use the library.&lt;/p&gt;

&lt;h4 id=&quot;preparing-dependencies&quot;&gt;Preparing dependencies&lt;/h4&gt;

&lt;p&gt;In order to use the CirclePageIndicator by Square, you need to add a repo to your main build.gradle file:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
allprojects {
    repositories {
        maven { url &#39;http://dl.bintray.com/populov/maven/&#39; }
        jcenter()
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;in-xml&quot;&gt;In XML:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;com.github.OrangeGangsters.circularbarpager.library.CircularBarPager
        android:id=&quot;@+id/circularBarPager&quot;
        android:layout_height=&quot;match_parent&quot;
        android:layout_width=&quot;match_parent&quot;
        android:paddingLeft=&quot;30dp&quot;
        android:paddingRight=&quot;30dp&quot;
        android:layout_centerInParent=&quot;true&quot;
        style=&quot;@style/CircularBarPagerStyle&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;in-stylesxml&quot;&gt;In styles.xml&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;style name=&quot;CircularBarPagerStyle&quot;&amp;gt;
        &amp;lt;item name=&quot;android:layout_height&quot;&amp;gt;match_parent&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:layout_width&quot;&amp;gt;match_parent&amp;lt;/item&amp;gt;

        &amp;lt;item name=&quot;progress_arc_max&quot;&amp;gt;100&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;arc_progress&quot;&amp;gt;0&amp;lt;/item&amp;gt;



        &amp;lt;item name=&quot;progress_arc_clockwise_outline_width&quot;&amp;gt;0.75dp&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;progress_arc_counter_clockwise_outline_width&quot;&amp;gt;0.75dp&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;progress_arc_clockwise_width&quot;&amp;gt;8dp&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;progress_arc_counter_clockwise_width&quot;&amp;gt;8dp&amp;lt;/item&amp;gt;
        
        &amp;lt;item name=&quot;progress_start_line_enabled&quot;&amp;gt;true&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;progress_pager_on_click_enabled&quot;&amp;gt;true&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;progress_pager_fill_circle_color&quot;&amp;gt;#00000000&amp;lt;/item&amp;gt;
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;========&lt;/p&gt;

&lt;h3 id=&quot;customization&quot;&gt;Customization&lt;/h3&gt;

&lt;p&gt;You can change several attributes in the XML file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app:arc_progress [integer def:0 0-100] –&amp;gt; The default arc progress when start up&lt;/li&gt;
  &lt;li&gt;app:progress_arc_max [integer def:100 0-100] –&amp;gt; The maximum arc progress&lt;/li&gt;
  &lt;li&gt;app:progress_arc_clockwise_color [color hex] –&amp;gt; The main color in clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_clockwise_outline_color [color hex] –&amp;gt; The outline color in clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_counter_clockwise_color [color hex] –&amp;gt; The outline color in counter-clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_counter_clockwise_outline_color [color hex] –&amp;gt; The outline color in counter-clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_clockwise_width [integer dp] –&amp;gt; The width size of the main color in clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_clockwise_outline_width [integer dp] –&amp;gt; The width size of the outline color in clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_counter_clockwise_width [integer dp] –&amp;gt; The width size of the color in counter-clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_arc_counter_clockwise_outline_width [integer dp] –&amp;gt; The width size of the outline color in counter-clockwise mode&lt;/li&gt;
  &lt;li&gt;app:progress_pager_on_click_enabled [boolean] –&amp;gt; The boolean that enables or disables the click enabled (on click, changes page)&lt;/li&gt;
  &lt;li&gt;app:progress_start_line_enabled [boolean] –&amp;gt; The boolean that enables the line that displays the starting position of the pager&lt;/li&gt;
  &lt;li&gt;app:progress_pager_on_click_enabled [boolean] –&amp;gt; The boolean that enables the user to change pages with a click as well as a slide&lt;/li&gt;
  &lt;li&gt;app:progress_pager_fill_circle_color [color hex] –&amp;gt; The color to fill the circle, transparent as default&lt;/li&gt;
  &lt;li&gt;app:progress_pager_fill_mode [enum int] –&amp;gt; The mode to fill the circle, “default_mode” or “pie_mode”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can access every components programmatically by getting the CircularBarPager object:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CircularBarPager mCircularBarPager = (CircularBarPager) findViewById(R.id.circularBarPager);
CircularBar circularBar = mCircularBarPager.getCircularBar();
ViewPager viewPager = mCircularBarPager.getViewPager();
CirclePageIndicator circlePageIndicator = mCircularBarPager.getCirclePageIndicator();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;========&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;We used ViewPagerIndicator from JakeWharton (https://github.com/JakeWharton/ViewPagerIndicator) for the page indicator at the bottom of the CircularBarPager&lt;/li&gt;
  &lt;li&gt;We used NineOldAndroids from JakeWharton (https://github.com/JakeWharton/NineOldAndroids/) to use beautiful animations on API 10+&lt;/li&gt;
  &lt;li&gt;We used AnimationEasingFunctions from daimajia (https://github.com/daimajia/AnimationEasingFunctions) to also use beautiful animations on API 10+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;========&lt;/p&gt;

&lt;h3 id=&quot;license&quot;&gt;License&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The MIT License (MIT)

Copyright (c) 2015 OrangeGangsters

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the &quot;Software&quot;), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/14/CircularBarPager/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/14/CircularBarPager/</guid>
        
        <category>circular</category>
        
        <category>progress</category>
        
        
      </item>
    
      <item>
        <title>PageIndicatorView</title>
        <description>&lt;h1 id=&quot;chipslayoutmanager-img-altchipslayoutmanager-is-an-android-library-srchttpswwwcleveroadcompubliccomerciallabel-androidsvg-height19-minsdk-for-chipslayoutmanagerhttpsimgshieldsiobadgeminsdk-15-greensvg-android-arsenalhttpsimgshieldsiobadgeandroid20arsenal-chipslayoutmanager-brightgreensvgstyleflathttpsandroid-arsenalcomdetails14568&quot;&gt;ChipsLayoutManager &lt;img alt=&quot;ChipsLayoutManager is an android library&quot; src=&quot;https://www.cleveroad.com/public/comercial/label-android.svg&quot; height=&quot;19&quot; /&gt; &lt;a href=&quot;#&quot;&gt;[minSdk for ChipsLayoutManager](https://img.shields.io/badge/minSdk-15-green.svg)&lt;/a&gt; &lt;a href=&quot;https://android-arsenal.com/details/1/4568#&quot;&gt;[Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-ChipsLayoutManager-brightgreen.svg?style=flat)&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;/images/header.png&quot;&gt;ChipsLayoutManager for RecyclerView. Custom layout manager for RecyclerView&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;this-is-chipslayoutmanager---custom-recycler-views-layoutmanager-which-moves-item-to-the-next-line-when-no-space-left-on-the-current&quot;&gt;This is ChipsLayoutManager - custom Recycler View’s LayoutManager which moves item to the next line when no space left on the current&lt;/h2&gt;
&lt;p&gt;This layout manager could represent &lt;a href=&quot;https://material.google.com/components/chips.html#&quot;&gt;Google Chips material design pattern&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an android developer i see that google isn’t so polite to support all our wishes, and when i faced with such common task like create spannable list
but with support of CRUD animations i decided to make such stuff and share it.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/images/demo.gif&quot; alt=&quot;Chips layout manager gif with scrolling&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;setup-and-usage&quot;&gt;Setup and usage&lt;/h2&gt;
&lt;p&gt;### Installation &lt;a href=&quot;https://bintray.com/beloo/widget/ChipsLayoutManager/_latestVersion&quot;&gt; [Download](https://api.bintray.com/packages/beloo/widget/ChipsLayoutManager/images/download.svg) &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with gradle
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRADLE 
compile &#39;com.beloo.widget:ChipsLayoutManager:0.3.4.1@aar&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Assuming you have installed jCenter provider:
&lt;code class=&quot;highlighter-rouge&quot;&gt;GRADLE
allprojects {
    repositories {
        jcenter()
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or just import &lt;code class=&quot;highlighter-rouge&quot;&gt;ChipsLayoutManager&lt;/code&gt; module to your project.&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;
&lt;p&gt;Layout manager represents chips or spanned or “bubble” structure of list items and is a good replace for typical implementations of such issue based on spans in &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; 
or custom &lt;code class=&quot;highlighter-rouge&quot;&gt;FlowLayout&lt;/code&gt;s.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;supports &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;’s/&lt;code class=&quot;highlighter-rouge&quot;&gt;LayoutManager&lt;/code&gt;’s features, such as default animations while CRUD items &amp;amp; custom &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemAnimator&lt;/code&gt;s, &lt;code class=&quot;highlighter-rouge&quot;&gt;ItemDecorator&lt;/code&gt;s, scrolling etc. &lt;code class=&quot;highlighter-rouge&quot;&gt;wrap_content&lt;/code&gt; of height is supported&lt;/li&gt;
  &lt;li&gt;vertical scrolling is supported. Horizontal scrolling isn’t supported. It is possible to disable vertical scrolling as well. Supported padding/margin, clipToPadding parameter of &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;supports different height and width of items&lt;/li&gt;
  &lt;li&gt;recycling items support (another advantage over &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; approach)&lt;/li&gt;
  &lt;li&gt;items gravity inside row support. For all items or only for required ones&lt;/li&gt;
  &lt;li&gt;LTR and RTL support&lt;/li&gt;
  &lt;li&gt;activity orientation change support&lt;/li&gt;
  &lt;li&gt;predictive animations supported (animate view movement outside of visible bounds)&lt;/li&gt;
  &lt;li&gt;setting max count of view in row&lt;/li&gt;
  &lt;li&gt;you are able to break row due to your conditions&lt;/li&gt;
  &lt;li&gt;justified views in row with spaces or additional view size&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Insert/delete&lt;/th&gt;
      &lt;th&gt;Move&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;/images/insert_delete_animations.gif&quot;&gt;Insert/delete animations with ChipsLayoutManager&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;/images/move_animations.gif&quot;&gt;Move animations with ChipsLayoutManager&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;####Layout Directions&lt;/p&gt;
&lt;center&gt;

|  | Left to Right  | Right to Left  |
|---|---|---|
|  &lt;b&gt;Horizontal&lt;/b&gt; |[Left to Right Rows implementation of ChipsLayoutManager](/images/ltr_horizontal.png) |[Right to Left implementation of ChipsLayoutManager](/images/rtl_horizontal.png)|
|  &lt;b&gt;Vertical&lt;/b&gt;   |[Left to Right Columns implementation of ChipsLayoutManager](/images/ltr_vertical.png) ||

&lt;/center&gt;

&lt;p&gt;####Fill strategy
Any row has some space left, where is impossible to place the next view, because that space is too small.
But we could distribute that space for available views in that row.&lt;/p&gt;

&lt;p&gt;Row strategy is a mode of distribution left space.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRATEGY_DEFAULT&lt;/code&gt; - is used by default. Left space is placed at the end of the row.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRATEGY_FILL_VIEW&lt;/code&gt; - available space is distributed among views.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRATEGY_FILL_SPACE&lt;/code&gt; - available space is distributed among spaces between views, start &amp;amp; end views are docked to a nearest border.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRATEGY_CENTER&lt;/code&gt; - available space is distributed among spaces between views, start &amp;amp; end spaces included. Views are placed in center of canvas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In such layouts by default last row isn’t considered completed. So strategy isn’t applied for last row.
But you can also enable opposite behaviour.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-JAVA&quot;&gt;ChipsLayoutManager chipsLayoutManager = ChipsLayoutManager.newBuilder()
        //set vertical gravity for all items in a row. Default = Gravity.CENTER_VERTICAL
        .setChildGravity(Gravity.TOP)
        //whether RecyclerView can scroll. TRUE by default
        .setScrollingEnabled(true)
        //set maximum views count in a particular row
        .setMaxViewsInRow(2)
        //set gravity resolver where you can determine gravity for item in position. 
        //This method have priority over previous one
        .setGravityResolver(new IChildGravityResolver() {
            @Override
            public int getItemGravity(int position) {
                return Gravity.CENTER;
            }
        })
        //you are able to break row due to your conditions. Row breaker should return true for that views
        .setRowBreaker(new IRowBreaker() {
            @Override
            public boolean isItemBreakRow(@IntRange(from = 0) int position) {
                return position == 6 || position == 11 || position == 2;
            }
        })
        //a layoutOrientation of layout manager, could be VERTICAL OR HORIZONTAL. HORIZONTAL by default
        .setOrientation(ChipsLayoutManager.HORIZONTAL)
        // row strategy for views in completed row, could be STRATEGY_DEFAULT, STRATEGY_FILL_VIEW, 
        //STRATEGY_FILL_SPACE or STRATEGY_CENTER
        .setRowStrategy(ChipsLayoutManager.STRATEGY_FILL_SPACE)
        // whether strategy is applied to last row. FALSE by default
        .withLastRow(true)
        .build();
rv.setLayoutManager(chipsLayoutManager);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that if you changed gravity resolver or row breaker conditions in runtime - it won’t affect already drown items and cached item positions.
You have to call &lt;code class=&quot;highlighter-rouge&quot;&gt;notifyItemChanged&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;ChipsLayoutManager&lt;/code&gt; otherwise layout won’t be predictable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Device current direction&lt;/strong&gt; have been chosen by default.
You can manipulate with layout direction (&lt;strong&gt;LTR&lt;/strong&gt; or &lt;strong&gt;RTL&lt;/strong&gt;)&lt;br /&gt;
&lt;em&gt;On Api &amp;gt;= 17:&lt;/em&gt;
```XML&lt;/p&gt;
&lt;android.support.v7.widget.recyclerview android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:layoutdirection=&quot;rtl&quot; /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;or programmatically (_on all supported Api:_):
```JAVA
ViewCompat.setLayoutDirection(recyclerView, ViewCompat.LAYOUT_DIRECTION_RTL);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For example look at sample application.
&lt;br /&gt;
### Bonus
You may need an &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView.ItemDecoration&lt;/code&gt; to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;ChipsLayoutManager&lt;/code&gt; for fast setup as showed in sample. &lt;br /&gt;
It contained in same package and named &lt;code class=&quot;highlighter-rouge&quot;&gt;SpacingItemDecoration&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;support&quot;&gt;Support&lt;/h2&gt;
&lt;p&gt;BETA is going.
I respond to your founded issues. Just create a ticket if you found something goes wrong.&lt;/p&gt;

&lt;h3 id=&quot;contributors&quot;&gt;Contributors&lt;/h3&gt;
&lt;p&gt;All pull requests are welcome. I’ve tried to make code clean &amp;amp; readable, so the next is up to you. 
I appreciate any help and contributors will be mentioned here.&lt;/p&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known issues&lt;/h3&gt;
&lt;p&gt;I create issues in tracking board of known problems.
These issues are going to be fixed in next versions.&lt;/p&gt;

&lt;h3 id=&quot;license-license-for-chipslayoutmanagerhttpsimgshieldsiocrateslrustc-serializesvg&quot;&gt;License &lt;a href=&quot;#&quot;&gt;[license for ChipsLayoutManager](https://img.shields.io/crates/l/rustc-serialize.svg)&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright 2016 Beloy Oleg, Ukraine.

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 14 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/14/ChipsLayoutManager/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/14/ChipsLayoutManager/</guid>
        
        <category>layoutmanager</category>
        
        
      </item>
    
      <item>
        <title>QRCodeReaderView</title>
        <description>&lt;h1 id=&quot;qrcodereaderview-downloadhttpsapibintraycompackagesdlazaro66mavenqrcodereaderviewimagesdownloadsvg-httpsbintraycomdlazaro66mavenqrcodereaderviewlatestversion-android-arsenalhttpsimgshieldsiobadgeandroid20arsenal-qrcodereaderview-brightgreensvgstyleflathttpandroid-arsenalcomdetails11891&quot;&gt;QRCodeReaderView &lt;a href=&quot;https://bintray.com/dlazaro66/maven/QRCodeReaderView/_latestVersion&quot;&gt;[Download](https://api.bintray.com/packages/dlazaro66/maven/QRCodeReaderView/images/download.svg) &lt;/a&gt; &lt;a href=&quot;http://android-arsenal.com/details/1/1891&quot;&gt;[Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-QRCodeReaderView-brightgreen.svg?style=flat)&lt;/a&gt;&lt;/h1&gt;

&lt;h4 id=&quot;modification-of-zxing-barcode-scanner-project-for-easy-android-qr-code-detection-and-ar-purposes&quot;&gt;Modification of ZXING Barcode Scanner project for easy Android QR-Code detection and AR purposes.&lt;/h4&gt;

&lt;p&gt;This project implements an Android view which show camera and notify when there’s a QR code inside the preview.&lt;/p&gt;

&lt;p&gt;Some Classes of camera controls and autofocus are taken and slightly modified from Barcode Scanner Android App.&lt;/p&gt;

&lt;p&gt;You can also use this for Augmented Reality purposes, as you get QR control points coordinates when decoding.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Add a “QRCodeReaderView” in the layout editor like you actually do with a button for example.&lt;/li&gt;
  &lt;li&gt;In your onCreate method, you can find the view as usual, using findViewById() function.&lt;/li&gt;
  &lt;li&gt;Create an Activity which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;onQRCodeReadListener&lt;/code&gt;, and let implements required methods or set a &lt;code class=&quot;highlighter-rouge&quot;&gt;onQRCodeReadListener&lt;/code&gt; to the QRCodeReaderView object&lt;/li&gt;
  &lt;li&gt;Make sure you have camera permissions in order to use the library. (https://developer.android.com/training/permissions/requesting.html)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.dlazaro66.qrcodereaderview.QRCodeReaderView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/qrdecoderview&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;match_parent&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Start &amp;amp; Stop camera preview in onPause() and onResume() overriden methods.&lt;/li&gt;
  &lt;li&gt;You can place widgets or views over QRDecoderView.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecoderActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnQRCodeReadListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QRCodeReaderView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qrCodeReaderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_decoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QRCodeReaderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;qrdecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnQRCodeReadListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;// Use this function to enable/disable decoding&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setQRDecodingEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use this function to change the autofocus interval (default is 5 secs)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAutofocusInterval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use this function to enable/disable Torch&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTorchEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use this function to set front camera preview&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFrontCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use this function to set back camera preview&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mydecoderview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setBackCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Called when a QR is decoded&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &quot;text&quot; : the text encoded in QR&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &quot;points&quot; : points where QR control points are placed in View&lt;/span&gt;
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onQRCodeRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;resultTextView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;qrCodeReaderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;qrCodeReaderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stopCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;add-it-to-your-project&quot;&gt;Add it to your project&lt;/h2&gt;

&lt;p&gt;Add QRCodeReaderView dependency to your build.gradle&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.1&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: There is an issue with gradle 2.10, if you declare your dependency and it can’t be found in jCenter repository (&lt;code class=&quot;highlighter-rouge&quot;&gt;could not find qrcodereaderview.jar Searched in the following locations:&lt;/code&gt; or similar), try to declare the library dependency like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.1@aar&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;transitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And in some cases, you need to clean your Gradle cache
&lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew build --refresh-dependencies&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;do-you-want-to-contribute&quot;&gt;Do you want to contribute?&lt;/h2&gt;

&lt;p&gt;Please send a PR or open an issue with your comments&lt;/p&gt;

&lt;h2 id=&quot;libraries-used-in-this-project&quot;&gt;Libraries used in this project&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/zxing/zxing/&quot;&gt;ZXING&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;../master/readme_images/app-example.gif?raw=true&quot;&gt;Image&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;developed-by&quot;&gt;Developed By&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;David Lázaro Esparcia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/_dlazaro&quot;&gt;
  &lt;img alt=&quot;Follow me on Twitter&quot; src=&quot;../master/readme_images/logo-twitter.png?raw=true&quot; /&gt;
&lt;/a&gt;
&lt;a href=&quot;https://es.linkedin.com/pub/david-lázaro-esparcia/49/4b3/342&quot;&gt;
  &lt;img alt=&quot;Add me to Linkedin&quot; src=&quot;../master/readme_images/logo-linkedin.png?raw=true&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;whos-using-it&quot;&gt;Who’s using it&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Does your app use QRCodeReaderView? If you want to be featured on this list drop me a line.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.swapcard.com/&quot;&gt;Swapcard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;license&quot;&gt;License&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright 2013 David Lázaro

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 13 Nov 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/11/13/QRCodeReaderView/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/11/13/QRCodeReaderView/</guid>
        
        <category>qrcode</category>
        
        
      </item>
    
      <item>
        <title>PageIndicatorView</title>
        <description>
&lt;p&gt;###&lt;strong&gt;PageIndicatorView&lt;/strong&gt;
&lt;a href=&quot;https://bintray.com/romandanylyk/maven/pageindicatorview/_latestVersion&quot;&gt; [Download](https://api.bintray.com/packages/romandanylyk/maven/pageindicatorview/images/download.svg) &lt;/a&gt;&lt;a href=&quot;https://android-arsenal.com/details/1/4555&quot;&gt;[Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-PageIndicatorView-green.svg?style=true)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://android-arsenal.com/api?level=14&quot;&gt;[API](https://img.shields.io/badge/API-14%2B-brightgreen.svg?style=flat)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PageIndicatorView&lt;/code&gt; will simplify your life while you working with Android &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewPager&lt;/code&gt; and need to indicate selected page. It’s easy to setup and customize as you need with run-time preview rendering.&lt;/p&gt;

&lt;p&gt;[](https://github.com/romandanylyk/PageIndicatorView/blob/master/assets/preview_anim_thin_worm.gif?raw=true)&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;Integration&lt;/strong&gt;
To add &lt;code class=&quot;highlighter-rouge&quot;&gt;pageindicatorview&lt;/code&gt; to your project, first make sure in root &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; you have specified the following repository:
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
    repositories {
        jcenter()
    }
&lt;/code&gt;
&lt;em&gt;Note: by creating new project in Android Studio it will have &lt;code class=&quot;highlighter-rouge&quot;&gt;jcenter&lt;/code&gt; repository specified by default, so you will not need to add it manually.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you make sure you have &lt;code class=&quot;highlighter-rouge&quot;&gt;jcenter&lt;/code&gt; repository in your project, all you need to do is to add the following line in &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; section of your project &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See latest library version &lt;a href=&quot;https://bintray.com/romandanylyk/maven/pageindicatorview/_latestVersion&quot;&gt; [Download](https://api.bintray.com/packages/romandanylyk/maven/pageindicatorview/images/download.svg) &lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;java
compile &#39;com.romandanylyk:pageindicatorview:X.X.X&#39;
&lt;/code&gt;
Keep in mind, that &lt;code class=&quot;highlighter-rouge&quot;&gt;PageIndicatorView&lt;/code&gt; has min &lt;a href=&quot;https://developer.android.com/about/dashboards/index.html&quot;&gt;API level 14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;Usage Sample&lt;/strong&gt;
During implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;PageIndicatorView&lt;/code&gt; I tried to make it’s setup as easy as possible. 
After you set adapter to your &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewPager&lt;/code&gt;, all you need to do is to &lt;code class=&quot;highlighter-rouge&quot;&gt;setViewPager()&lt;/code&gt; and that’s it &lt;code class=&quot;highlighter-rouge&quot;&gt;PageIndicatorView&lt;/code&gt; will get count from your adapter and start working with instance of your &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewPager&lt;/code&gt; automatically.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ViewPager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewPager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewPager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;viewPager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;viewPager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//instance of android.support.v4.view.PagerAdapter adapter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PageIndicatorView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageIndicatorView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PageIndicatorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pageIndicatorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pageIndicatorView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setViewPager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewPager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Keep in mind that all public methods are also exist as attributes, so you can even setup and customize page indicator without any java code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;com.rd.PageIndicatorView&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/pageIndicatorView&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;attrs:piv_viewPager=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@id/viewPager&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###&lt;strong&gt;Customization&lt;/strong&gt;
One of the most important feature of every custom view is ability to customize its look as user need. By calling the following methods (or attributes) you will be able to customize &lt;code class=&quot;highlighter-rouge&quot;&gt;PageIndicatorView&lt;/code&gt; as you need.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//set size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setDynamicCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;setRadius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radiusDp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setPadding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paddingDp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setStrokeWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strokeDp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//set color&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setUnselectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setSelectedColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//set animation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setAnimationDuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setAnimationType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnimationType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setInteractiveAnimation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isInteractive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//set selection&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selectingPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;progress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setSelection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;[](https://github.com/romandanylyk/PageIndicatorView/blob/master/assets/prev_attributes.gif?raw=true)&lt;/p&gt;

&lt;p&gt;Here you can see all the animations &lt;code class=&quot;highlighter-rouge&quot;&gt;PageIndicatorView&lt;/code&gt; support.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Support version&lt;/th&gt;
      &lt;th&gt;Preview&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.NONE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_none.gif&quot;&gt;anim_prev_none&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.COLOR&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_color.gif&quot;&gt;anim_prev_color&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.SCALE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_scale.gif&quot;&gt;anim_prev_scale&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.SLIDE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_slide.gif&quot;&gt;anim_prev_slide&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.WORM&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.1&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_worm.gif&quot;&gt;anim_prev_worm&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.FILL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.6&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_fill.gif&quot;&gt;anim_prev_worm&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AnimationType.THIN_WORM&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;0.0.7&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_prev_thin_worm.gif&quot;&gt;anim_prev_thin_worm&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;###&lt;strong&gt;Release Note&lt;/strong&gt;
See release notes on &lt;a href=&quot;https://github.com/romandanylyk/PageIndicatorView/releases&quot;&gt;github releases&lt;/a&gt; or &lt;a href=&quot;https://bintray.com/romandanylyk/maven/pageindicatorview#release&quot;&gt;Bintray release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;###&lt;strong&gt;License&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Copyright 2016 Roman Danylyk

Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 22 Oct 2016 00:00:00 +0900</pubDate>
        <link>http://android.kmshack.kr/2016/10/22/PageIndicatorView/</link>
        <guid isPermaLink="true">http://android.kmshack.kr/2016/10/22/PageIndicatorView/</guid>
        
        <category>indicator</category>
        
        
      </item>
    
  </channel>
</rss>
